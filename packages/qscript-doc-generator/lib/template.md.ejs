<%- stopText %>

# QScript
### Version `<%= version %>`

[![Build Status](https://travis-ci.org/wmfs/qscript.svg?branch=master)](https://travis-ci.org/wmfs/qscript) [![CodeFactor](https://www.codefactor.io/repository/github/wmfs/qscript/badge)](https://www.codefactor.io/repository/github/wmfs/qscript) [![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fwmfs%2Fqscript.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fwmfs%2Fqscript?ref=badge_shield) [![Known Vulnerabilities](https://snyk.io/test/github/wmfs/qscript/badge.svg?targetFile=package.json)](https://snyk.io/test/github/wmfs/qscript?targetFile=package.json) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com) [![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lernajs.io/) [![Dependabot badge](https://img.shields.io/badge/Dependabot-active-brightgreen.svg)](https://dependabot.com/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/wmfs/qscript/blob/master/CONTRIBUTING.md)

#### The goal of QScript is to provide a [JSON](https://tools.ietf.org/html/rfc7159)-based language to describe User Interfaces (especially those which form part of a digital service).

## Getting started

#### Get hands-on with QScript using the online [QScript Playpen](https://wmfs.github.io/qscript/)!

* For some introductory context around why we developed QScript, please see [Appendix A: QScript Motivation](#motivation).
* A [JSON Schema (Draft-07)](http://json-schema.org/) for QScript is available [here](https://raw.githubusercontent.com/wmfs/qscript/master/packages/qscript-schema/lib/schema.json).
* The QScript [Lerna](https://lernajs.io/) multi-package repository (developed in the open on [Github](https://github.com/wmfs/qscript)) provides several utilities to help work with the language. Please see [Appendix B: QScript Utilities](#utilities) for further information.

## <a name="toc"></a>Table of Contents

* [Structure of a View](#structure)
  * [Example: Simple View](#example)
* [Concepts](#concepts)
  * [Views](#view)
  * [Apps](#app)
  * [Widgets](#widget)
    * [Widget summary](#widget-summary)
  * [Sets](#set)
  * [Expressions](#expression)
* [Reference](#reference)
  * [Top-Level Properties](#top-level)
  * [Widget Properties](#properties)
  * [Widget Attributes](#attributes)
  * [Widget List](#list)
* [License (GPLv3)](#license)
* [Appendices](#appendices)
  * [Appendix A: QScript Motivation](#motivation)
  * [Appendix B: QScript Utilities](#utilities)

## <a name="structure"></a>Structure of a View

__In QScript, a _view_ is represented by a [JSON Object](https://tools.ietf.org/html/rfc7159#section-4]).__

### <a name="example"></a>Example: Simple View

__The content of a [_view_](#view) is specified by configuring one-or-more [_widgets_](#widget), which are represented by JSON objects.__

* In this example, a view is defined that contains two widgets, one that defines a suitable [`header`](#list-header) (with some text and an accompanying image),
followed by a second [`text`](#text-header)-widget for letting the user enter their name.

``` json
<%- simpleExample -%>

```

## <a name="concepts"></a>Concepts

__QScript is built on a handful of key concepts...__

### <a name="view"></a>Views

The purpose of QScript is to define a user interface, referred to as a "__view__".

* In QScript, the term "view" refers to the "V" in [MVC](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller). Views can relate to traditional forms or used to simply display data to the user (like a dashboard or similar).
* With QScript it's possible to configure a view with structure, validation, conditional content, dynamic values and context-sensitive behaviours (e.g. operating differently with an internet connection as opposed to without).
* QScript definitions are naturally stored in `.json` files (typically one-file-per-view).
* In certain situations [YAML](https://en.wikipedia.org/wiki/YAML) (itself just a superset of JSON) may offer an interesting alternative to serialising QScript definitions (the [qscript-parser](https://github.com/wmfs/qscript/tree/master/packages/qscript-parser) utility supports both)..
* Please note that a [JSON Schema](http://json-schema.org/) is available [here](https://raw.githubusercontent.com/wmfs/qscript/master/packages/qscript-schema/lib/schema.json), which may be used to validate the basic integrity of QScript content.
* For more comprehensive QScript validation, please refer to the [qscript-schema](https://www.npmjs.com/package/qscript-schema) package.

### <a name="app"></a>Apps

Views defined in QScript may be rendered and executed by software.
In this document, such software is referred to an "__app__".

* Apps can be implemented in any frontend-framework, language or library.
* QScript does not impose any aesthetic or UI constraints onto apps which implement it.
* QScript content can be embedded inside apps with [GUI](https://en.wikipedia.org/wiki/Graphical_user_interface), [CLI](https://en.wikipedia.org/wiki/Graphical_user_interface) and even [Voice-User](https://en.wikipedia.org/wiki/Voice_user_interface) interfaces.
* Please note several utilities are available to help embed QScript into apps. Please see [Appendix B: QScript Utilities](#utilities) for further information.

### <a name="widget"></a>Widgets

Views are constructed from an ordered list of "__widgets__".

* To avoid overloading frontend-terms like 'component', QScript refers to each object in the `widgets` array as a __widget__.
* Consider a widget as an area of a view responsible for a particular task: either collecting a specific piece of information from a user or visualising some data.
* As such, widgets can be interactive ([`text`](#list-text), [`number`](#list-number), [`map`](#list-map) etc.) and non-interactive ([`heading`](#list-heading), [`stickyNote`](#list-stickyNote) etc.)
* The order that `Widget` objects appear within a view definition is important - representing the order users will encounter them.
* QScript is a delightful walled-garden, offering a fixed set of <%= widgets.length %> pre-configured widgets. If you need another widget-type or an extra attribute... [pull requests are very welcome!](https://github.com/wmfs/QScript/blob/master/CONTRIBUTING.md) :blush:

__Ahead of the [Reference](#reference) section, here's a quick summary of the <%= widgets.length %> widgets supported in QScript `<%= version %>`:__

#### <a name="widget-summary"></a>Widget summary

| Widget Type      | Description |
| -----------      | ----------- |
<% widgets.forEach(function(widget) { -%>
| [`<%= widget.type -%>`](#list-<%= widget.type -%>) | <%- widget.title %> |
<% }) %>

### <a name="set"></a>Sets

All the [widgets](#widget) that define a [view](#view)'s content are specified in a simple array.
This design helps align QScript with vertical-scrolling interfaces with very little friction.
To assist with navigation (especially around larger, more complex content) it might be useful to split a view into more manageable pieces.

* __In QScript,  _sets_ allow widgets to be grouped into related chunks.__

__Example JSON__

``` json
<%- simpleSetExample -%>

```

* In this example, we are declaring that a [`text`](#list-text) widget (with the id `name`) should be rendered within a set (which should appear in a Table of Contents with the heading "_Profile_").
* The beginning of each set is marked with a [`set`](#list-set) widget and is terminated with an [`endSet`](#list-endSet) widget (just like `<div>` and `</div>`).
* Nesting of sets is possible and sets are especially powerful when combined with dynamic [expressions](#expression) to conditionally show/hide content.
* Sets also enable apps to offer [progress tracking](https://www.smashingmagazine.com/2010/01/progress-trackers-in-web-design-examples-and-best-design-practices/) functionality.
* Multi-step "wizard" interfaces are also easily achieved via sets.
* The [`subView`](#list-subView) and [`endSubView`](#list-endSubView) widgets use exactly the same technique to define repeating-groups of widgets.

### <a name="expression"></a>Expressions

QScript uses __expressions__ to deliver dynamic content. Expressions are used to:

* Conditionally show/hide widgets depending on values as they change.
* Validate view content based on more complex business rules.
* Affect the contents of enumerated lists.
* Default dynamic values.
* Calculate running totals, real-time summaries etc.

Consider an expression to be something that could be evaluated in a Javascript `if (...) {}` statement.

```json
<%- expressionExample -%>

```

__In the example above we have three widgets:__

1. The first widget is a simple [`header`](#list-header).
2. The second widget is a simple boolean on/off [`switch`](#list-switch) (with the `id` of `userWantsToGiveFeedback`) which is by default set to `false`.
3. The third widget is a [`textarea`](#list-textbox) box (with the `id` of `feedback`) for collecting feedback from the user.

The `feedback` widget should only show if the `userWantsToGiveFeedback` switch is thrown on (i.e. `true`).

There are a few new things going on here.
Most types of widget (here the `switch` and `textarea` types) expect an app to read and write their values to an underlying `data` object (using their respective `id` values as keys).
It is also expected that any app implementing QScript should also make this `data` object available within a safe sandbox while evaluating expressions.

In the previous example we can see the `showWhen` attribute is being used on the `feedback` widget. The string value here is an _expression_, which will control the visibility of the widget (i.e. it should only be shown to the user when the expression evaluates to `true`).

#### <a name="sandbox"></a>Expression sandbox

Apps must ensure expressions are evaluated in a safe sandbox context. As such only certain objects may be referred to within an expression:

| Sandbox object | Description |
| -------------- | ----------- |
| `data`         | The current view data being stored. Should be kept fresh in real-time using UI binding techniques. |
| `env`          | Some environmental information, e.g. the user's name, if the app has access to an internet connection etc. |

##### __`env` object properties__

Apps are expected to provide the following details via an `env` object when evaluating expressions:

| Property         | Type      | Description |
| ---------------- | --------- | ----------- |
| `username`       | `string`  | Username of the the user currently using the form. |
| `startedOffline` | `boolean` | Indicates if the form was started online, or not. |

##  <a name="reference"></a>Reference

### <a name="top-level"></a>Top-Level Properties

The top-level object defining a view comprises of several properties:

| Property         | Type      | Description | Required?   |
| ---------------- | --------- | ----------- | ----------- |
<% topLevelProperties.forEach(function(topLevelProperty) { -%>
| `<%= topLevelProperty.name %>` | `<%= topLevelProperty.type%>` | <%= topLevelProperty.desc %> | `<%= topLevelProperty.required%>` |
<% }) %>


### <a name="properties"></a>Widget Properties

Each `widget` object comprise of some properties:

| Attribute Name | Type | Description |
| -------------- | -----| ----------- |
<% properties.forEach(function(property) { -%>
| `<%= property.name%>` | `<%= property.type %>` | <%- property.title %> |
<% })-%>
| `attributes` | `object` | A key/value object for configuring each widget - the content of which is dependent on the widget's `type`. |

### <a name="attributes"></a>Widget Attributes

QScript `<%= version %>` supports a set of <%= attributes.length %> common attributes from which widgets can be configured.
Not one widget-type requires all these attributes. Attributes are often optional and some widget-types don't need an `attributes` object at all.

| Attribute Name | Type | Description |
| -------------- | -----| ----------- |
<% attributes.forEach(function(attribute) { -%>
| `<%= attribute.name%>` | `<%= attribute.type %>` | <%- attribute.title %> |
<% }) %>

# <a name="list"></a>Widget List

Here is the full list of all <%= widgets.length %> widgets supported in QScript `<%= version %>` (please see [Widget summary](#widget-summary) for a handy index).

<% widgets.forEach(function(widget) { -%>

<hr>

## The <a name="list-<%= widget.type -%>"></a>`<%= widget.type%>` widget

__<%- widget.title %>__

__Example JSON__

``` json
<%- widget.example %>

```

__Properties__

<% widget.propertySummary.forEach(function(prop) { -%>

__`<%= prop.name -%>`:__ <%- prop.text -%>

<% }) %>

<% if (widget.attributeSummary.length > 0 ) { -%>

__Attributes__

| Name | Type | Required | Description |
| ---- | -----| -------- | ----------- |
<% widget.attributeSummary.forEach(function(attrib) { -%>
| `<%= attrib.name -%>` | <%- attrib.type -%> | `<%= attrib.required -%>` | <%- attrib.text -%> |
<% }) %>

<% } %>

<% }) %>

<hr>

# <a name="license"></a>License (GPLv3)

The QScript specification and related tooling is provided under [__GNU General Public License v3.0__](https://github.com/wmfs/qscript/blob/master/LICENSE).

[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fwmfs%2Fqscript.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fwmfs%2Fqscript?ref=badge_large)

<hr>

# <a name="appendices"></a>Appendices

## <a name="motivation"></a>Appendix A: QScript Motivation

__QScript is the product of a small in-house development team at [West Midlands Fire Service](http://www.wmfs.net).
Our work over the last 20 years has often involved collecting data from a variety of teams and environments.
During this time, our best experiences have come from taking a declarative approach to defining form content.__

* Originally we used XML to define the content of our forms (or _workbooks_ as they became known).
From there it was a relatively simple process to write a renderer to conjure appropriate UIs from those definitions.
Over the intervening years we have defined some 50 workbooks in XML to collect over 3 million documents and we've extended our [DSL](https://en.wikipedia.org/wiki/Domain-specific_language) to support growing business need.

* We're now actively working on our third-generation view rendering engine.
While designing the accompanying backend, we've found great benefit in aligning to open standards (for example our workflow is now defined in [Amazon State Language](https://states-language.net/spec.html)).

* Given our positive experiences of declarative techniques and open standards, it was a natural evolution for our new declarative-UI engine to incorporate an open standard.
We therefore prototyped using a few projects (for example [Schema Form](https://json-schema-form.github.io/angular-schema-form/)) and shipped our [MVP](https://en.wikipedia.org/wiki/Minimum_viable_product) using [Mozilla React Schema Form](https://mozilla-services.github.io/react-jsonschema-form).

__They're great libraries and helped us get up-and-running quickly.__

In hindsight, both these specifications are restricted by being bound to an underlying UI technology (i.e. Angular and React respectively).
Both projects mandate a traditional web-form interface too. What if we're only working in a CLI context, or want to try some voice-interface technology? And what if we wanted to define dashboards and similar read-only content?

* React Schema Form and Schema.io work well for reasonably trivial UI content, but start adding requirements for expression-based conditionality/validation, different layout structures, differing online/offline behaviours etc. and we were soon "working against" both approaches - even to deliver quite basic experiences.

To compound matters, the underlying use of [JSON Schema](http://json-schema.org/) involves a lot of duplication and arbitrary splitting between model and UI definitions: which soon builds friction when describing larger UIs.
In turn, we found this complexity bleeds into tooling and the wider architecture.

__So with a shopping-list in-hand:__

1. Must be an open standard and encourage contributions
2. Must be easily extended to include new capabilities
3. Must not be tied to any particular frontend technology or project
4. Must not be tied to a particular UI pattern
5. Must use a standard expression language (strong preference towards Javascript)
6. Must support complex validation expressions
7. Must support dynamic show/hide expressions (with optimisation for large chunks of the view)
8. Must support online/offline behaviours
9. Must have a schema to validate declarations and support tooling
10. Must have an open SDK or similar to assist implementation
11. Must be well documented
12. Must have minimum of friction for embedding in a variety of app styles
12. Strong preference towards JSON-based languages

__...we went looking for an open standard capable of replacing our existing library of XML-defined views (some of which are pretty hefty in terms of number of components and logic).__

__Spoiler:__ We couldn't find one. Which was disappointing (and unexpected), because the experience of adopting [Amazon State Language](https://states-language.net/spec.html) had been great.
We were edging closer to defining our own, but at the same time very mindful of this sort of thing:

![How standards proliferate Licensed under CC BY-NC 2.5 by xkcd.com](https://imgs.xkcd.com/comics/standards.png)

* A particularity bad smell came about when we developed a simple intermediary format (to ease tooling complexity and authoring processes) which we could translate back into React Schema Form definitions.
It was becoming evident we didn't have a good fit for what we wanted to do, and that using a badly-fitting standard is actually worse than not using a standard at all.

* The XML used in our outgoing generation had some problems: requiring it's own expression-language was a particular mis-step and XML feels ancient if used directly on the client app (especially in [Single Page Applications](https://en.wikipedia.org/wiki/Single-page_application) and [Progressive Web Apps](https://en.wikipedia.org/wiki/Progressive_Web_Apps) contexts).

### So... __QScript__!

* __It does all the things _we_ need, and we think it might be useful to other organisations if it became a standard.__

## <a name="utilities"></a>Appendix B: QScript Utilities

__Here are some [Node.js](https://nodejs.org/en/)-based utilities to help working with QScript:__

| Package | Description | Github | NPM  |
| ------- | ------------| ------ | ---- |
<% packages.forEach(function(package) { -%>
| `<%= package.name -%>` | <%- package.description -%> | [Here](<%- package.repo -%>) | [Here](<%- package.npm -%>) -%> |
<% }) %>
